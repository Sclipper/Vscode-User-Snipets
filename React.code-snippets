{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    //     "scope": "javascript,typescript",
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
    //     "description": "Log output to console"
    // }
    "stateless": {
        "prefix": "scomponent",
        "body": [
            "import React from 'react'",
            "",
            "const ${1:} = () => {",
            "const classes = useStyles()",
            "  return (",
            "    <div> </div>",
            "  )",
            "",
            "}",
            "",
            "export default ${1:}"
        ],
        "description": "Creates stateless react component"
    },
    "withStyles": {
        "prefix": "sfullcomponent",
        "body": [
            "// @flow",
            "import * as React from 'react'",
            "",
            "import { makeStyles } from '@material-ui/core'",
            "",
            "import { FormattedMessage } from 'react-intl'",
            "import intl from 'risika/localization/components'",
            "",
            "const useStyles = makeStyles((theme) => ({",
            "",
            "}))",
            "",
            "type Props = {",
            "",
            "}",
            "const ${1:} = ({ ${2:} }: Props) => {",
            "const classes = useStyles()",
            "  return (",
            "    <div> </div>",
            "  )",
            "",
            "}",
            "",
            "export default ${1:}"
        ],
        "description": "Creates stateless react component"
    },
    "effect": {
        "prefix": "seffect",
        "body": [
            "React.useEffect(() => {",
            "",
            "}, [${1:}])",
        ],
        "description": "React useEffect"
    },
    "state": {
        "prefix": "sstate",
        "body": [
            "const [${1:var}, ${2:var}] = React.useState('${3:}')"
        ],
        "description": "React useState"
    },
    "map": {
        "prefix": "smap",
        "body": [
            "${1:var}.map(${2:x} => {",
            "",
            "}"
        ],
    },
    "default import": {
        "prefix": "simportd",
        "body": [
            "import ${1:component} from '${2:component}'",
        ],
    },
    "named import": {
        "prefix": "simportn",
        "body": [
            "import { ${1:component}, } from '${2:component}'",
        ],
    },
    "HMTL element": {
        "prefix": "shtml",
        "body": [
            "<${1:element}> </${1:element}>",
        ],
    },
    "Material ui element": {
        "prefix": "smaterial",
        "body": [
            "<${1:element} className={${2:''}} />",
        ],
    },
    "Stateless Function": {
        "prefix": "sfunction",
        "body": [
            "const ${1:functionName} = (${2:}) => {",
            "",
            "}"
        ],
    },
    "Hover Propperty To Component": {
        "prefix": "spointer, shover",
        "body": [
            "'&:hover': {",
            "  cursor: 'pointer',",
            "},"
        ]
    },
    "Add props to component": {
        "prefix": "sprops",
        "body": "const { ${1:} } = props "
    },
    "Add styles": {
        "prefix": "smakeStyles",
        "body": [
            "const useStyles = makeStyles(theme => ({",
            "",
            "}))"
        ]
    },
    "Media Querry": {
        "prefix": "smedia",
        "body": [
            "'@media screen and (max-width: 600px)': {",
            "",
            "}"
        ]
    },
    "Media Thwmw Querry": {
        "prefix": "smediatheme",
        "body": [
            "[theme.breakpoints.${1:up/down}('${2:xl: 1920, lg: 1280, md: 960, sm: 600, xs:0}')]: {",
            "",
            "}"
        ]
    },
    "Console Log": {
        "prefix": "slog",
        "body": "console.log(${1:})",
    },
    "Connect": {
        "prefix": "sconnect",
        "body": [
            "const mapStateToProps = state => ({",
            "// localVatiableName: state.path.to.redux.state,",
            "})",
            "",
            "const mapDispatchToProps = dispatch => ({",
            "// localName: (value) => dispatch(setNameInRedux(value)),",
            "})",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:})",
        ]
    },
    "Redux hooks": {
        "prefix": "sredux",
        "body": [
            "const { variables } = useSelector(state => state.component.root)",
            "const dispatch = useDispatch()",
        ]
    },
    "Redux hooks import": {
        "prefix": "sreduximport",
        "body": [
            "import { useSelector, useDispatch } from 'react-redux'",
        ]
    },
    "importMaterialCore": {
        "prefix": "score",
        "body": [
            "import { ${1:} } from '@material-ui/core'",
        ]
    },
    "importMaterialIcons": {
        "prefix": "sicons",
        "body": [
            "import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'",
            "import { faChevron${1:} } from '@fortawesome/free-solid-svg-icons'",
        ]
    },
    "importMaterialStyles": {
        "prefix": "sstyles",
        "body": [
            "import { ${1:} } from '@material-ui/core/styles'",
        ]
    },
    "string": {
        "prefix": "string",
        "body": [
            "string",
        ]
    },
    "boolean": {
        "prefix": "boolean",
        "body": [
            "boolean",
        ]
    },
    "Synthetic event": {
        "prefix": "SyntheticEvent",
        "body": [
            "SyntheticEvent<${1:}>",
        ]
    },
    "Formatted message": {
        "prefix": "sFormattedMessage",
        "body": [
            "<FormattedMessage id={intl.${2:}('${1:}')} />",
        ]
    },
    "Attr d3": {
        "prefix": "sattr",
        "body": [
            ".attr('${1:}', '${2:}')",
        ]
    },
    "Constants redux": {
        "prefix": "sconst",
        "body": [
            "import { DOMAIN as _ } from 'risika/configs'",
            "",
            "/**************",
            "* Saga calls *",
            "**************/",
            "export const CONSTANT_1 = `${_} CONSTANT_1`",
            "",
            "/****************",
            "* Action calls *",
            "****************/",
            "export const CONSTANT_2 = `${_} CONSTANT_2`",
        ]
    },
    "Reducer redux": {
        "prefix": "sreducer",
        "body": [
            "// @flow",
            "import { type Action, AsyncAction } from 'risika/store/flow-typed'",
            "import { CONSTANT_1 } from './constants'",
            "",
            "type ComponentInitialState = {",
            "var1: type1,",
            "}",
            "",
            "const handleSaveToState = (state, action) => {",
            "const { payload } = action",
            "return {",
            "...state,",
            "var1: payload.newValue,",
            "}",
            "}",
            "",
            "export const initialState: ComponentInitialState = {",
            "var1: {},",
            "}",
            "",
            "export const reducerName = (",
            "state: ComponentInitialState = initialState,",
            "action: Action = { type: '' },",
            ") => {",
            "switch (action.type) {",
            "case CONSTANT_1:",
            "return handleSaveToState(state, action)",
            "default:",
            "return state",
            "}",
            "}",
            "",
            "export default reducerName",
        ]
    },
    "Saga redux": {
        "prefix": "ssaga",
        "body": [
            "import { takeEvery, call, put, all } from 'redux-saga/effects'",
            "import { apiCall1 } from 'risika/services/api'",
            "",
            "import { CONSTANT_1 } from './constants'",
            "",
            "import { action1Success, action1Failed } from './actions'",
            "",
            "/**********",
            "* Watcher *",
            "**********/",
            "export function* someComponentSaga() {",
            "yield takeEvery(CONSTANT_1, fetchSomeData)",
            "}",
            "",
            "/**********",
            "* Worker *",
            "**********/",
            "function* fetchSomeData({ payload }) {",
            "const { var1 } = payload",
            "try {",
            "const result = yield call(apiCall1, var1)",
            "yield put(action1Success(result))",
            "} catch (error) {",
            "yield put(action1Failed())",
            "}",
            "}",
        ]
    },
    "Action Redux": {
        "prefix": "saction",
        "body": [
            "// @flow",
            "import { type AsyncAction } from 'risika/store/flow-typed'",
            "import { CONSTANT_NAME_1, CONSTANT_NAME_2 } from './constants'",
            "",
            "type dataTypeProp1 = {",
            "prop1: someCoolType,",
            "}",
            "",
            "/**************",
            "* Saga calls *",
            "**************/",
            "export const submitFetchSomeData = ({",
            "prop1,",
            "}: dataTypeProp1): AsyncAction<dataTypeProp1> => {",
            "return {",
            "type: CONSTANT_NAME_1,",
            "payload: { prop1 },",
            "status: 'LOADING',",
            "}",
            "}",
            "",
            "/*****************",
            "* Reducer calls *",
            "*****************/",
            "",
            "export const storeSomeData = (data: dataTypes): AsyncAction<dataTypes> => {",
            "return {",
            "type: CONSTANT_NAME_2,",
            "payload: data,",
            "status: 'SUCCESS',",
            " }",
            "}"
        ]
    },
    "Get statement cypress": {
        "prefix": "sget",
        "body": [
            "cy.get('[data-cy=\"${1:}\"]')",
        ]
    },
    "set cypress id": {
        "prefix": "scid",
        "body": [
            "data-cy=\"${1:}\""
        ]
    },
}
