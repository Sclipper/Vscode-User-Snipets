{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    //     "scope": "javascript,typescript",
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
    //     "description": "Log output to console"
    // }
    "stateless": {
        "prefix": "scomponent",
        "body": [
            "type ${1:ComponentName}Props = {",
"",
            "}",
           " ",
            "function ${1:ComponentName}({ }: ${1:ComponentName}Props) {",
                "return (",
                    "<div> ",
                        "<p>",
                            "Hello",
                        "</p>",
                    "</div>",
                ")",
           " ",
            "}",
           " ",
            "export default ${1:ComponentName}",
        ],
        "description": "Creates stateless react component"
    },
    "effect": {
        "prefix": "seffect",
        "body": [
            "React.useEffect(() => {",
            "",
            "}, [${1:}])",
        ],
        "description": "React useEffect"
    },
    "state": {
        "prefix": "sstate",
        "body": [
            "const [${1:var}, ${2:var}] = React.useState('${3:}')"
        ],
        "description": "React useState"
    },
    "map": {
        "prefix": "smap",
        "body": [
            "${1:var}.map(${2:x} => {",
            "",
            "}"
        ],
    },

    "HMTL element": {
        "prefix": "shtml",
        "body": [
            "<${1:element}> </${1:element}>",
        ],
    },
    "Stateless Function": {
        "prefix": "sfunction",
        "body": [
            "const ${1:functionName} = (${2:}) => {",
            "",
            "}"
        ],
    },
    "Hover Propperty To Component": {
        "prefix": "spointer, shover",
        "body": [
            "'&:hover': {",
            "  cursor: 'pointer',",
            "},"
        ]
    },
    "Media Querry": {
        "prefix": "smedia",
        "body": [
            "'@media screen and (max-width: 600px)': {",
            "",
            "}"
        ]
    },
    "Media Thwmw Querry": {
        "prefix": "smediatheme",
        "body": [
            "[theme.breakpoints.${1:up/down}('${2:xl: 1920, lg: 1280, md: 960, sm: 600, xs:0}')]: {",
            "",
            "}"
        ]
    },
    "Console Log": {
        "prefix": "slog",
        "body": "console.log('${1:}', ${1:})",
    },
    "string": {
        "prefix": "string",
        "body": [
            "string",
        ]
    },
    "boolean": {
        "prefix": "boolean",
        "body": [
            "boolean",
        ]
    },
    "Synthetic event": {
        "prefix": "SyntheticEvent",
        "body": [
            "SyntheticEvent<${1:}>",
        ]
    },
    "Formatted message": {
        "prefix": "sFormattedMessage",
        "body": [
            "<FormattedMessage id={intl.${2:}('${1:}')} />",
        ]
    },
    "Attr d3": {
        "prefix": "sattr",
        "body": [
            ".attr('${1:}', '${2:}')",
        ]
    },
    "Get statement cypress": {
        "prefix": "sget",
        "body": [
            "cy.get('[data-cy=\"${1:}\"]')",
        ]
    },
    "set cypress id": {
        "prefix": "scy",
        "body": [
            "data-cy=\"${1:}\""
        ]
    },
    "crete-context-boilerplate": {
        "prefix": "scontext",
        "body": [
            "import * as React from 'react'",
"",
"/**",
 "* 1. Write the name of the context Provider starting with a capital letter ",
 "* 2. Press Tab",
 "* 3. Write the name of the reducer (usually the name of the provider, but with lowercase first letter)",
 "* 4. Delete this comment",
 "*/",
            "type case1Payload = {",
              "var1: number",
            "}",
            "type Action = {type: 'case1', payload: case1Payload} | {type: 'case2'}",
            "type Dispatch = (action: Action) => void",
            "type State = {var1: number}",
            "type ${1:Generic}ProviderProps = {children: React.ReactNode}",
           " ",
            "const ${1:Generic}StateContext = React.createContext<",
              "{state: State; dispatch: Dispatch} | undefined",
            ">(undefined)",
           " ",
            "function ${2:generic}Reducer(state: State, action: Action) {",
              "switch (action.type) {",
                "case 'case1': {",
                  "return {",
                    "...state,",
                    "var1: action.payload.var1",
                  "}",
                "}",
                "default: {",
                  "throw new Error(`Unhandled action type: ${action.type}`)",
                "}",
              "}",
            "}",
           " ",
           " ",
            "const defaultState = {",
              "var1: 0",
            "}",
           " ",
           " ",
            "function ${1:Generic}Provider({children}: ${1:Generic}ProviderProps) {",
              "const [state, dispatch] = React.useReducer(${2:generic}Reducer, defaultState)",
              "// NOTE: you *might* need to memoize this value",
             " ",
              "const value = {state, dispatch}",
              "return (",
                "<${1:Generic}StateContext.Provider value={value}>",
                  "{children}",
                "</${1:Generic}StateContext.Provider>",
              ")",
            "}",
           " ",
            "function use${1:Generic}() {",
              "const context = React.useContext(${1:Generic}StateContext)",
              "if (context === undefined) {",
                "throw new Error('use${1:Generic} must be used within a ${1:Generic}Provider')",
              "}",
              "return context",
            "}",
           " ",
            "export {${1:Generic}Provider, use${1:}}",
        ]
    },
}
